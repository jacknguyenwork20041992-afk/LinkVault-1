import { GoogleGenAI } from "@google/genai";

// DON'T DELETE THIS COMMENT
// Follow these instructions when using this blueprint:
// - Note that the newest Gemini model series is "gemini-2.5-flash" or "gemini-2.5-pro"
//   - do not change this unless explicitly requested by the user

// This API key is from Gemini Developer API Key, not vertex AI API Key
const ai = new GoogleGenAI({ apiKey: process.env.GEMINI_API_KEY || "" });

export async function chatWithGeminiAI(
  message: string,
  knowledgeContext: any,
  conversationHistory: Array<{ role: "user" | "assistant"; content: string }> = []
): Promise<string> {
  try {
    // Build enhanced system prompt with knowledge context including FAQ and articles
    const systemPrompt = `B·∫°n l√† tr·ª£ l√Ω AI th√¥ng minh c·ªßa VIA English Academy, m·ªôt trung t√¢m ti·∫øng Anh chuy√™n nghi·ªáp v√† uy t√≠n. 
H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch th√¢n thi·ªán, chi ti·∫øt, h·ªØu √≠ch v√† chuy√™n nghi·ªáp.

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
- Lu√¥n s·ª≠ d·ª•ng th√¥ng tin CH√çNH X√ÅC t·ª´ c∆° s·ªü d·ªØ li·ªáu
- Tr·∫£ l·ªùi chi ti·∫øt v√† c·ª• th·ªÉ, kh√¥ng tr·∫£ l·ªùi chung chung
- N·∫øu c√≥ FAQ ph√π h·ª£p, ∆∞u ti√™n s·ª≠ d·ª•ng c√¢u tr·∫£ l·ªùi t·ª´ FAQ
- N·∫øu c√≥ b√†i vi·∫øt li√™n quan, tham kh·∫£o n·ªôi dung ƒë·ªÉ ƒë∆∞a ra c√¢u tr·∫£ l·ªùi ƒë·∫ßy ƒë·ªß
- Khi kh√¥ng c√≥ th√¥ng tin c·ª• th·ªÉ, n√≥i r√µ v√† ƒë∆∞a ra g·ª£i √Ω h·ªØu √≠ch

C∆† S·ªû KI·∫æN TH·ª®C VIA ENGLISH ACADEMY:

${knowledgeContext.knowledgeBase?.length > 0 ? `
üìö KI·∫æN TH·ª®C C∆† B·∫¢N V√Ä FAQ:
${knowledgeContext.knowledgeBase.map((kb: any) => `
üè∑Ô∏è Danh m·ª•c: ${kb.category}

‚ùì C√ÇU H·ªéI TH∆Ø·ªúNG G·∫∂P:
${kb.faqs.map((faq: any) => `‚Ä¢ Q: ${faq.question}
  A: ${faq.answer}
  Keywords: ${faq.keywords?.join(', ') || 'N/A'}`).join('\n')}

üìñ B√ÄI VI·∫æT CHI TI·∫æT:
${kb.articles.map((article: any) => `‚Ä¢ ${article.title}
  N·ªôi dung: ${article.content}
  Keywords: ${article.keywords?.join(', ') || 'N/A'}`).join('\n')}
`).join('\n')}
` : ''}

${knowledgeContext.programs?.length > 0 ? `
üéì CH∆Ø∆†NG TR√åNH H·ªåC:
${knowledgeContext.programs.map((p: any) => `- ${p.name} (${p.level}): ${p.description || 'Ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o chuy√™n nghi·ªáp'}
${p.categories?.length > 0 ? `  Danh m·ª•c t√†i li·ªáu: ${p.categories.map((c: any) => c.name).join(', ')}` : ''}`).join('\n')}
` : ''}

${knowledgeContext.notifications?.length > 0 ? `
üì¢ TH√îNG B√ÅO M·ªöI NH·∫§T:
${knowledgeContext.notifications.slice(0, 5).map((n: any) => `- ${n.title}: ${n.message}`).join('\n')}
` : ''}

${knowledgeContext.projects?.length > 0 ? `
üöÄ D·ª∞ √ÅN & HO·∫†T ƒê·ªòNG:
${knowledgeContext.projects.slice(0, 3).map((p: any) => `- ${p.name}: ${p.description || 'D·ª± √°n ƒëang tri·ªÉn khai'}
  Ph·ª• tr√°ch: ${p.assignee} | Tr·∫°ng th√°i: ${p.status}`).join('\n')}
` : ''}

${knowledgeContext.importantDocuments?.length > 0 ? `
üìã T√ÄI LI·ªÜU QUAN TR·ªåNG:
${knowledgeContext.importantDocuments.map((d: any) => `- ${d.title}: ${d.description || 'T√†i li·ªáu thi·∫øt y·∫øu cho h·ªçc vi√™n'}`).join('\n')}
` : ''}

NHI·ªÜM V·ª§: D·ª±a tr√™n th√¥ng tin tr√™n, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa h·ªçc vi√™n m·ªôt c√°ch ch√≠nh x√°c, chi ti·∫øt v√† h·ªØu √≠ch nh·∫•t.
N·∫øu c√¢u h·ªèi li√™n quan ƒë·∫øn FAQ, h√£y s·ª≠ d·ª•ng ch√≠nh x√°c c√¢u tr·∫£ l·ªùi t·ª´ FAQ.
N·∫øu c√≥ b√†i vi·∫øt li√™n quan, h√£y tham kh·∫£o v√† t√≥m t·∫Øt th√¥ng tin quan tr·ªçng.`;

    // Convert conversation history to Gemini format
    const conversationContents = [];
    
    // Add conversation history
    for (const msg of conversationHistory) {
      conversationContents.push({
        role: msg.role === "assistant" ? "model" : "user",
        parts: [{ text: msg.content }]
      });
    }
    
    // Add current user message
    conversationContents.push({
      role: "user",
      parts: [{ text: message }]
    });

    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      config: {
        systemInstruction: systemPrompt,
      },
      contents: conversationContents,
    });

    return response.text || "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y.";
  } catch (error) {
    console.error("Gemini AI error:", error);
    throw new Error("Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi d·ªãch v·ª• AI. Vui l√≤ng th·ª≠ l·∫°i sau.");
  }
}